!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BINMAPSHIFT	./malloc.c	/^#define BINMAPSHIFT /;"	d	file:
BINMAPSIZE	./malloc.c	/^#define BINMAPSIZE /;"	d	file:
BITSPERMAP	./malloc.c	/^#define BITSPERMAP /;"	d	file:
CALL_CHUNKFUN	./obstack.c	/^# define CALL_CHUNKFUN(/;"	d	file:
CALL_FREEFUN	./obstack.c	/^# define CALL_FREEFUN(/;"	d	file:
COPYING_UNIT	./obstack.c	/^#  define COPYING_UNIT /;"	d	file:
DEFAULT_ALIGNMENT	./obstack.c	/^  DEFAULT_ALIGNMENT = offsetof (struct fooalign, u),$/;"	e	enum:__anon4	file:
DEFAULT_BUFFER_SIZE	./memusage.c	/^#define DEFAULT_BUFFER_SIZE /;"	d	file:
DEFAULT_MMAP_MAX	./malloc.c	/^#define DEFAULT_MMAP_MAX /;"	d	file:
DEFAULT_MMAP_THRESHOLD	./malloc.c	/^#define DEFAULT_MMAP_THRESHOLD /;"	d	file:
DEFAULT_MMAP_THRESHOLD_MAX	./malloc.c	/^#define DEFAULT_MMAP_THRESHOLD_MAX /;"	d	file:
DEFAULT_MMAP_THRESHOLD_MIN	./malloc.c	/^#define DEFAULT_MMAP_THRESHOLD_MIN /;"	d	file:
DEFAULT_MXFAST	./malloc.c	/^#define DEFAULT_MXFAST /;"	d	file:
DEFAULT_ROUNDING	./obstack.c	/^  DEFAULT_ROUNDING = sizeof (union fooround)$/;"	e	enum:__anon4	file:
DEFAULT_TOP_PAD	./malloc.c	/^#define DEFAULT_TOP_PAD /;"	d	file:
DEFAULT_TRIM_THRESHOLD	./malloc.c	/^#define DEFAULT_TRIM_THRESHOLD /;"	d	file:
DUMPED_MAIN_ARENA_CHUNK	./malloc.c	/^#define DUMPED_MAIN_ARENA_CHUNK(/;"	d	file:
DYNARRAY_CONCAT0	./dynarray-skeleton.c	/^#define DYNARRAY_CONCAT0(/;"	d	file:
DYNARRAY_CONCAT0	./dynarray-skeleton.c	/^#undef DYNARRAY_CONCAT0$/;"	d	file:
DYNARRAY_CONCAT1	./dynarray-skeleton.c	/^#define DYNARRAY_CONCAT1(/;"	d	file:
DYNARRAY_CONCAT1	./dynarray-skeleton.c	/^#undef DYNARRAY_CONCAT1$/;"	d	file:
DYNARRAY_ELEMENT	./dynarray-skeleton.c	/^#undef DYNARRAY_ELEMENT$/;"	d	file:
DYNARRAY_ELEMENT_FREE	./dynarray-skeleton.c	/^#undef DYNARRAY_ELEMENT_FREE$/;"	d	file:
DYNARRAY_ELEMENT_INIT	./dynarray-skeleton.c	/^#undef DYNARRAY_ELEMENT_INIT$/;"	d	file:
DYNARRAY_FINAL_TYPE	./dynarray-skeleton.c	/^#undef DYNARRAY_FINAL_TYPE$/;"	d	file:
DYNARRAY_HAVE_SCRATCH	./dynarray-skeleton.c	/^#  define DYNARRAY_HAVE_SCRATCH /;"	d	file:
DYNARRAY_HAVE_SCRATCH	./dynarray-skeleton.c	/^# define DYNARRAY_HAVE_SCRATCH /;"	d	file:
DYNARRAY_HAVE_SCRATCH	./dynarray-skeleton.c	/^#undef DYNARRAY_HAVE_SCRATCH$/;"	d	file:
DYNARRAY_INITIAL_SIZE	./dynarray-skeleton.c	/^# define DYNARRAY_INITIAL_SIZE /;"	d	file:
DYNARRAY_INITIAL_SIZE	./dynarray-skeleton.c	/^#undef DYNARRAY_INITIAL_SIZE$/;"	d	file:
DYNARRAY_NAME	./dynarray-skeleton.c	/^#define DYNARRAY_NAME(/;"	d	file:
DYNARRAY_NAME	./dynarray-skeleton.c	/^#undef DYNARRAY_NAME$/;"	d	file:
DYNARRAY_PREFIX	./dynarray-skeleton.c	/^#undef DYNARRAY_PREFIX$/;"	d	file:
DYNARRAY_SCRATCH	./dynarray-skeleton.c	/^# define DYNARRAY_SCRATCH(/;"	d	file:
DYNARRAY_SCRATCH	./dynarray-skeleton.c	/^#undef DYNARRAY_SCRATCH$/;"	d	file:
DYNARRAY_STRUCT	./dynarray-skeleton.c	/^#undef DYNARRAY_STRUCT$/;"	d	file:
DYNARRAY_STRUCT	./dynarray-skeleton.c	/^struct DYNARRAY_STRUCT$/;"	s	file:
ELIDE_CODE	./obstack.c	/^#  define ELIDE_CODE$/;"	d	file:
FASTBIN_CONSOLIDATION_THRESHOLD	./malloc.c	/^#define FASTBIN_CONSOLIDATION_THRESHOLD /;"	d	file:
FREEFLOOD	./mcheck.c	/^#define FREEFLOOD /;"	d	file:
HAVE_MALLOC_INIT_HOOK	./malloc.c	/^#define HAVE_MALLOC_INIT_HOOK /;"	d	file:
HAVE_MREMAP	./malloc.c	/^#define HAVE_MREMAP /;"	d	file:
HEAP_MAX_SIZE	./arena.c	/^#define HEAP_MAX_SIZE /;"	d	file:
HEAP_MIN_SIZE	./arena.c	/^#define HEAP_MIN_SIZE /;"	d	file:
INTERNAL_SIZE_T	./malloc-internal.h	/^# define INTERNAL_SIZE_T /;"	d
IS_MMAPPED	./malloc.c	/^#define IS_MMAPPED /;"	d	file:
MAGIC	./memusage.c	/^#define MAGIC /;"	d	file:
MAGICBYTE	./mcheck.c	/^#define MAGICBYTE /;"	d	file:
MAGICFREE	./mcheck.c	/^#define MAGICFREE /;"	d	file:
MAGICWORD	./mcheck.c	/^#define MAGICWORD /;"	d	file:
MALLOCFLOOD	./mcheck.c	/^#define MALLOCFLOOD /;"	d	file:
MALLOC_ALIGN_MASK	./malloc-internal.h	/^#define MALLOC_ALIGN_MASK /;"	d
MALLOC_DEBUG	./malloc.c	/^#define MALLOC_DEBUG /;"	d	file:
MALLOC_STATE_MAGIC	./hooks.c	/^#define MALLOC_STATE_MAGIC /;"	d	file:
MALLOC_STATE_VERSION	./hooks.c	/^#define MALLOC_STATE_VERSION /;"	d	file:
MAP_ANONYMOUS	./malloc.c	/^#define MAP_ANONYMOUS /;"	d	file:
MAP_NORESERVE	./malloc.c	/^#define MAP_NORESERVE /;"	d	file:
MAX_FAST_SIZE	./malloc.c	/^#define MAX_FAST_SIZE /;"	d	file:
MAX_ITERS	./malloc.c	/^#define MAX_ITERS /;"	d	file:
MAX_TCACHE_COUNT	./malloc.c	/^#define MAX_TCACHE_COUNT /;"	d	file:
MAX_TCACHE_SIZE	./malloc.c	/^#define MAX_TCACHE_SIZE /;"	d	file:
MAYBE_INIT_TCACHE	./malloc.c	/^#define MAYBE_INIT_TCACHE(/;"	d	file:
MCHECK_DISABLED	./mcheck.h	/^  MCHECK_DISABLED = -1,         \/* Consistency checking is not turned on.  *\/$/;"	e	enum:mcheck_status
MCHECK_FREE	./mcheck.h	/^  MCHECK_FREE,                  \/* Block freed twice.  *\/$/;"	e	enum:mcheck_status
MCHECK_HEAD	./mcheck.h	/^  MCHECK_HEAD,                  \/* Memory before the block was clobbered.  *\/$/;"	e	enum:mcheck_status
MCHECK_OK	./mcheck.h	/^  MCHECK_OK,                    \/* Block is fine.  *\/$/;"	e	enum:mcheck_status
MCHECK_TAIL	./mcheck.h	/^  MCHECK_TAIL                   \/* Memory after the block was clobbered.  *\/$/;"	e	enum:mcheck_status
MINSIZE	./malloc.c	/^#define MINSIZE /;"	d	file:
MIN_CHUNK_SIZE	./malloc.c	/^#define MIN_CHUNK_SIZE /;"	d	file:
MIN_LARGE_SIZE	./malloc.c	/^#define MIN_LARGE_SIZE /;"	d	file:
MMAP	./malloc.c	/^#define MMAP(/;"	d	file:
MMAP_AS_MORECORE_SIZE	./malloc.c	/^#define MMAP_AS_MORECORE_SIZE /;"	d	file:
MORECORE	./malloc.c	/^#define MORECORE /;"	d	file:
MORECORE_CLEARS	./malloc.c	/^#define MORECORE_CLEARS /;"	d	file:
MORECORE_CONTIGUOUS	./malloc.c	/^#define MORECORE_CONTIGUOUS /;"	d	file:
MORECORE_FAILURE	./malloc.c	/^#define MORECORE_FAILURE /;"	d	file:
M_ARENA_MAX	./malloc.h	/^#define M_ARENA_MAX /;"	d
M_ARENA_TEST	./malloc.h	/^#define M_ARENA_TEST /;"	d
M_CHECK_ACTION	./malloc.h	/^#define M_CHECK_ACTION /;"	d
M_GRAIN	./malloc.h	/^# define M_GRAIN /;"	d
M_KEEP	./malloc.h	/^# define M_KEEP /;"	d
M_MMAP_MAX	./malloc.c	/^#define M_MMAP_MAX /;"	d	file:
M_MMAP_MAX	./malloc.h	/^#define M_MMAP_MAX /;"	d
M_MMAP_THRESHOLD	./malloc.c	/^#define M_MMAP_THRESHOLD /;"	d	file:
M_MMAP_THRESHOLD	./malloc.h	/^#define M_MMAP_THRESHOLD /;"	d
M_MXFAST	./malloc.c	/^#define M_MXFAST /;"	d	file:
M_MXFAST	./malloc.h	/^# define M_MXFAST /;"	d
M_NLBLKS	./malloc.h	/^# define M_NLBLKS /;"	d
M_PERTURB	./malloc.h	/^#define M_PERTURB /;"	d
M_TOP_PAD	./malloc.c	/^#define M_TOP_PAD /;"	d	file:
M_TOP_PAD	./malloc.h	/^#define M_TOP_PAD /;"	d
M_TRIM_THRESHOLD	./malloc.c	/^#define M_TRIM_THRESHOLD /;"	d	file:
M_TRIM_THRESHOLD	./malloc.h	/^#define M_TRIM_THRESHOLD /;"	d
NARENAS_FROM_NCORES	./malloc.c	/^#define NARENAS_FROM_NCORES(/;"	d	file:
NBINS	./malloc.c	/^#define NBINS /;"	d	file:
NFASTBINS	./malloc.c	/^#define NFASTBINS /;"	d	file:
NONCONTIGUOUS_BIT	./malloc.c	/^#define NONCONTIGUOUS_BIT /;"	d	file:
NON_MAIN_ARENA	./malloc.c	/^#define NON_MAIN_ARENA /;"	d	file:
NSMALLBINS	./malloc.c	/^#define NSMALLBINS /;"	d	file:
NULL	./morecore.c	/^# define NULL /;"	d	file:
N_	./memusagestat.c	/^# define N_(/;"	d	file:
OBSTACK_INTERFACE_VERSION	./obstack.c	/^#define OBSTACK_INTERFACE_VERSION /;"	d	file:
PACKAGE	./memusagestat.c	/^#define PACKAGE /;"	d	file:
PREV_INUSE	./malloc.c	/^#define PREV_INUSE /;"	d	file:
PTR_INT_TYPE	./obstack.h	/^# define PTR_INT_TYPE /;"	d
REALLOC_ZERO_BYTES_FREES	./malloc.c	/^#define REALLOC_ZERO_BYTES_FREES /;"	d	file:
REMOVE_FB	./malloc.c	/^#define REMOVE_FB(/;"	d	file:
RETURN_ADDRESS	./malloc.c	/^#define RETURN_ADDRESS(/;"	d	file:
SIZE_BITS	./malloc.c	/^#define SIZE_BITS /;"	d	file:
SIZE_SZ	./malloc-internal.h	/^#define SIZE_SZ /;"	d
SMALLBIN_CORRECTION	./malloc.c	/^#define SMALLBIN_CORRECTION /;"	d	file:
SMALLBIN_WIDTH	./malloc.c	/^#define SMALLBIN_WIDTH /;"	d	file:
SWITCH	./mtrace.pl	/^    SWITCH: {$/;"	l
TCACHE_FILL_COUNT	./malloc.c	/^#define TCACHE_FILL_COUNT /;"	d	file:
TCACHE_MAX_BINS	./malloc.c	/^#define TCACHE_MAX_BINS /;"	d	file:
TRACE_BUFFER_SIZE	./mtrace.c	/^#define TRACE_BUFFER_SIZE /;"	d	file:
TRIM_FASTBINS	./malloc.c	/^#define TRIM_FASTBINS /;"	d	file:
TUNABLE_CALLBACK_FNDECL	./arena.c	/^#define TUNABLE_CALLBACK_FNDECL(/;"	d	file:
TUNABLE_NAMESPACE	./arena.c	/^#define TUNABLE_NAMESPACE /;"	d	file:
XSIZE	./memusagestat.c	/^#define XSIZE /;"	d	file:
YSIZE	./memusagestat.c	/^#define YSIZE /;"	d	file:
_	./obstack.c	/^#  define _(/;"	d	file:
_DYNARRAY_H	./dynarray.h	/^#define _DYNARRAY_H$/;"	d
_FILE_OFFSET_BITS	./memusagestat.c	/^#define _FILE_OFFSET_BITS /;"	d	file:
_MALLOC_H	./malloc.h	/^#define _MALLOC_H /;"	d
_MALLOC_HOOKS_H	./malloc-hooks.h	/^#define _MALLOC_HOOKS_H$/;"	d
_MALLOC_INTERNAL	./mcheck.c	/^# define _MALLOC_INTERNAL$/;"	d	file:
_MALLOC_INTERNAL	./morecore.c	/^# define _MALLOC_INTERNAL$/;"	d	file:
_MALLOC_INTERNAL	./mtrace.c	/^# define _MALLOC_INTERNAL$/;"	d	file:
_MALLOC_INTERNAL_H	./malloc-internal.h	/^#define _MALLOC_INTERNAL_H$/;"	d
_MCHECK_H	./mcheck.h	/^#define _MCHECK_H /;"	d
_OBSTACK_H	./obstack.h	/^#define _OBSTACK_H /;"	d
__BPTR_ALIGN	./obstack.h	/^#define __BPTR_ALIGN(/;"	d
__MALLOC_DEPRECATED	./malloc.h	/^# define __MALLOC_DEPRECATED /;"	d
__MALLOC_DEPRECATED	./malloc.h	/^# define __MALLOC_DEPRECATED$/;"	d
__MALLOC_HOOK_VOLATILE	./malloc.h	/^# define __MALLOC_HOOK_VOLATILE /;"	d
__MALLOC_HOOK_VOLATILE	./malloc.h	/^# define __MALLOC_HOOK_VOLATILE$/;"	d
__PTR_ALIGN	./obstack.h	/^#define __PTR_ALIGN(/;"	d
__after_morecore_hook	./malloc.c	/^void weak_variable (*__after_morecore_hook)(void) = NULL;$/;"	v
__assert_fail	./malloc.c	/^#define __assert_fail(/;"	d	file:
__attribute_malloc__	./malloc.h	/^__THROW __attribute_malloc__;$/;"	v
__attribute_pure__	./obstack.h	/^# define __attribute_pure__ /;"	d
__dynarray_error	./dynarray.h	/^__dynarray_error (struct dynarray_header *list)$/;"	f
__dynarray_error_marker	./dynarray.h	/^__dynarray_error_marker (void)$/;"	f
__extension__	./obstack.h	/^#  define __extension__$/;"	d
__failing_morecore	./arena.c	/^__failing_morecore(ptrdiff_t d)$/;"	f	file:
__free_hook	./malloc.c	/^void weak_variable (*__free_hook)(void *__ptr,$/;"	v
__libc_alloc_buffer_alloc_array	./alloc_buffer_alloc_array.c	/^__libc_alloc_buffer_alloc_array (struct alloc_buffer *buf, size_t element_size,$/;"	f
__libc_alloc_buffer_allocate	./alloc_buffer_allocate.c	/^__libc_alloc_buffer_allocate (size_t size, void **pptr)$/;"	f
__libc_alloc_buffer_copy_bytes	./alloc_buffer_copy_bytes.c	/^__libc_alloc_buffer_copy_bytes (struct alloc_buffer buf,$/;"	f
__libc_alloc_buffer_copy_string	./alloc_buffer_copy_string.c	/^__libc_alloc_buffer_copy_string (struct alloc_buffer buf, const char *src)$/;"	f
__libc_alloc_buffer_create_failure	./alloc_buffer_create_failure.c	/^__libc_alloc_buffer_create_failure (void *start, size_t size)$/;"	f
__libc_calloc	./malloc.c	/^    void *__libc_calloc(size_t, size_t);$/;"	v
__libc_calloc	./malloc.c	/^__libc_calloc(size_t n, size_t elem_size)$/;"	f
__libc_dynarray_at_failure	./dynarray_at_failure.c	/^__libc_dynarray_at_failure (size_t size, size_t index)$/;"	f
__libc_dynarray_emplace_enlarge	./dynarray_emplace_enlarge.c	/^__libc_dynarray_emplace_enlarge (struct dynarray_header *list,$/;"	f
__libc_dynarray_finalize	./dynarray_finalize.c	/^__libc_dynarray_finalize (struct dynarray_header *list,$/;"	f
__libc_dynarray_resize	./dynarray_resize.c	/^__libc_dynarray_resize (struct dynarray_header *list, size_t size,$/;"	f
__libc_dynarray_resize_clear	./dynarray_resize_clear.c	/^__libc_dynarray_resize_clear (struct dynarray_header *list, size_t size,$/;"	f
__libc_freeres	./set-freeres.c	/^__libc_freeres (void)$/;"	f
__libc_freeres_ptrs	./set-freeres.c	/^symbol_set_define (__libc_freeres_ptrs);$/;"	v
__libc_mallinfo	./malloc.c	/^__libc_mallinfo(void)$/;"	f
__libc_malloc	./malloc.c	/^__libc_malloc(size_t bytes)$/;"	f
__libc_mallopt	./malloc.c	/^int __libc_mallopt(int param_number, int value)$/;"	f
__libc_pvalloc	./malloc.c	/^__libc_pvalloc(size_t bytes)$/;"	f
__libc_pvalloc	./malloc.c	/^void *__libc_pvalloc(size_t);$/;"	v
__libc_reallocarray	./reallocarray.c	/^__libc_reallocarray (void *optr, size_t nmemb, size_t elem_size)$/;"	f
__libc_scratch_buffer_grow	./scratch_buffer_grow.c	/^__libc_scratch_buffer_grow (struct scratch_buffer *buffer)$/;"	f
__libc_scratch_buffer_grow_preserve	./scratch_buffer_grow_preserve.c	/^__libc_scratch_buffer_grow_preserve (struct scratch_buffer *buffer)$/;"	f
__libc_scratch_buffer_set_array_size	./scratch_buffer_set_array_size.c	/^__libc_scratch_buffer_set_array_size (struct scratch_buffer *buffer,$/;"	f
__libc_thread_freeres	./thread-freeres.c	/^__libc_thread_freeres (void)$/;"	f
__libc_valloc	./malloc.c	/^    void *__libc_valloc(size_t);$/;"	v
__malloc_arena_thread_freeres	./arena.c	/^void __malloc_arena_thread_freeres(void)$/;"	f
__malloc_assert	./malloc.c	/^__malloc_assert(const char *assertion, const char *file, unsigned int line,$/;"	f	file:
__malloc_check_init	./hooks.c	/^__malloc_check_init (void)$/;"	f
__malloc_fork_lock_parent	./arena.c	/^void __malloc_fork_lock_parent(void)$/;"	f
__malloc_fork_unlock_child	./arena.c	/^void __malloc_fork_unlock_child(void)$/;"	f
__malloc_fork_unlock_parent	./arena.c	/^void __malloc_fork_unlock_parent(void)$/;"	f
__malloc_hook	./malloc.c	/^void *weak_variable (*__malloc_hook)(size_t __size, const void *) = malloc_hook_ini;$/;"	v
__malloc_initialize_hook	./malloc-hooks.h	/^void (*__malloc_initialize_hook) (void);$/;"	v
__malloc_initialize_hook	./malloc.c	/^void weak_variable (*__malloc_initialize_hook)(void) = NULL;$/;"	v
__malloc_initialize_hook	./mcheck-init.c	/^void (*__malloc_initialize_hook) (void) = turn_on_mcheck;$/;"	v
__malloc_initialized	./arena.c	/^int __malloc_initialized = -1;$/;"	v
__malloc_stats	./malloc.c	/^void __malloc_stats(void)$/;"	f
__malloc_trim	./malloc.c	/^int __malloc_trim(size_t s)$/;"	f
__malloc_usable_size	./malloc.c	/^__malloc_usable_size(void *m)$/;"	f
__memalign_hook	./malloc.c	/^void *weak_variable (*__memalign_hook)(size_t __alignment, size_t __size, const void *) = memalign_hook_ini;$/;"	v
__morecore	./malloc.c	/^void *(*__morecore)(ptrdiff_t) = __default_morecore;$/;"	v
__obstack_free	./obstack.c	/^__obstack_free (struct obstack *h, void *obj)$/;"	f
__obstack_free	./obstack.h	/^# define __obstack_free /;"	d
__posix_memalign	./malloc.c	/^int __posix_memalign(void **memptr, size_t alignment, size_t size)$/;"	f
__realloc_hook	./malloc.c	/^void *weak_variable (*__realloc_hook)(void *__ptr, size_t __size, const void *) = realloc_hook_ini;$/;"	v
__sbrk	./morecore.c	/^# define __sbrk /;"	d	file:
__wur	./malloc.h	/^extern void *pvalloc (size_t __size) __THROW __attribute_malloc__ __wur;$/;"	v
_dl_open_hook	./arena.c	/^libc_hidden_proto(_dl_open_hook);$/;"	v
_heap_info	./arena.c	/^typedef struct _heap_info$/;"	s	file:
_int_free	./malloc.c	/^_int_free(mstate av, mchunkptr p, int have_lock)$/;"	f	file:
_int_malloc	./malloc.c	/^_int_malloc(mstate av, size_t bytes)$/;"	f	file:
_int_memalign	./malloc.c	/^_int_memalign(mstate av, size_t alignment, size_t bytes)$/;"	f	file:
_int_new_arena	./arena.c	/^_int_new_arena(size_t size)$/;"	f	file:
_int_realloc	./malloc.c	/^_int_realloc(mstate av, mchunkptr oldp, INTERNAL_SIZE_T oldsize,$/;"	f
_mid_memalign	./malloc.c	/^_mid_memalign(size_t alignment, size_t bytes, void *address)$/;"	f	file:
_obstack_begin	./obstack.c	/^_obstack_begin (struct obstack *h,$/;"	f
_obstack_begin_1	./obstack.c	/^_obstack_begin_1 (struct obstack *h, int size, int alignment,$/;"	f
_obstack_chunk	./obstack.h	/^struct _obstack_chunk           \/* Lives at front of each chunk. *\/$/;"	s
_obstack_compat	./obstack.c	/^struct obstack *_obstack_compat = 0;$/;"	v	typeref:struct:obstack
_obstack_newchunk	./obstack.c	/^_obstack_newchunk (struct obstack *h, int length)$/;"	f
abortfunc	./mcheck.c	/^static void (*abortfunc) (enum mcheck_status);$/;"	v	file:
add	./dynarray-skeleton.c	/^DYNARRAY_NAME (add) (struct DYNARRAY_STRUCT *list, DYNARRAY_ELEMENT item)$/;"	f	file:
add__	./dynarray-skeleton.c	/^DYNARRAY_NAME (add__) (struct DYNARRAY_STRUCT *list, DYNARRAY_ELEMENT item)$/;"	f	file:
aligned_OK	./malloc.c	/^#define aligned_OK(/;"	d	file:
aligned_heap_area	./arena.c	/^static char *aligned_heap_area;$/;"	v	file:
alignment_mask	./obstack.h	/^  int alignment_mask;           \/* Mask of alignment for each object. *\/$/;"	m	struct:obstack
alloc_failed	./obstack.h	/^  unsigned alloc_failed : 1;      \/* No longer used, as we now call the failed$/;"	m	struct:obstack
alloc_perturb	./malloc.c	/^alloc_perturb(char *p, size_t n)$/;"	f	file:
allocated	./dynarray-skeleton.c	/^      size_t allocated;$/;"	m	struct:DYNARRAY_STRUCT::__anon1::__anon2	file:
allocated	./dynarray.h	/^  size_t allocated;$/;"	m	struct:dynarray_header
also_total	./memusagestat.c	/^static int also_total = 0;$/;"	v	file:
ar_ptr	./arena.c	/^  mstate ar_ptr;           \/* Arena for this heap. *\/ \/\/ 这个 heap 的 arena$/;"	m	struct:_heap_info	file:
arena	./malloc.h	/^  int arena;    \/* non-mmapped space allocated from system *\/$/;"	m	struct:mallinfo
arena_for_chunk	./arena.c	/^#define arena_for_chunk(/;"	d	file:
arena_get	./arena.c	/^#define arena_get(/;"	d	file:
arena_get2	./arena.c	/^arena_get2(size_t size, mstate avoid_arena)$/;"	f	file:
arena_get_retry	./arena.c	/^arena_get_retry(mstate ar_ptr, size_t bytes)$/;"	f	file:
arena_lock	./arena.c	/^#define arena_lock(/;"	d	file:
arena_max	./hooks.c	/^  unsigned long arena_max;$/;"	m	struct:malloc_save_state	file:
arena_max	./malloc.c	/^  INTERNAL_SIZE_T arena_max;$/;"	m	struct:malloc_par	file:
arena_test	./hooks.c	/^  unsigned long arena_test;$/;"	m	struct:malloc_save_state	file:
arena_test	./malloc.c	/^  INTERNAL_SIZE_T arena_test;$/;"	m	struct:malloc_par	file:
arglist	./mtrace.pl	/^arglist: while (@ARGV) {$/;"	l
argp	./memusagestat.c	/^static struct argp argp =$/;"	v	typeref:struct:argp	file:
argp_program_version_hook	./memusagestat.c	/^void (*argp_program_version_hook) (FILE *, struct argp_state *) = print_version;$/;"	v
args_doc	./memusagestat.c	/^static const char args_doc[] = N_ ("DATAFILE [OUTFILE]");$/;"	v	file:
array	./dynarray-skeleton.c	/^      DYNARRAY_ELEMENT *array;$/;"	m	struct:DYNARRAY_STRUCT::__anon1::__anon2	file:
array	./dynarray.h	/^  void *array;$/;"	m	struct:dynarray_finalize_result
array	./dynarray.h	/^  void *array;$/;"	m	struct:dynarray_header
at	./dynarray-skeleton.c	/^DYNARRAY_NAME (at) (struct DYNARRAY_STRUCT *list, size_t index)$/;"	f	file:
attached_threads	./malloc.c	/^  INTERNAL_SIZE_T attached_threads;$/;"	m	struct:malloc_state	file:
attribute_tls_model_ie	./arena.c	/^static __thread mstate thread_arena attribute_tls_model_ie;$/;"	v	file:
av	./hooks.c	/^  mbinptr av[NBINS * 2 + 2];$/;"	m	struct:malloc_save_state	file:
begin	./dynarray-skeleton.c	/^DYNARRAY_NAME (begin) (struct DYNARRAY_STRUCT *list)$/;"	f	file:
bin_at	./malloc.c	/^#define bin_at(/;"	d	file:
bin_index	./malloc.c	/^#define bin_index(/;"	d	file:
binmap	./malloc.c	/^  unsigned int binmap[BINMAPSIZE];$/;"	m	struct:malloc_state	file:
bins	./malloc.c	/^  mchunkptr bins[NBINS * 2 - 2];$/;"	m	struct:malloc_state	file:
bk	./malloc.c	/^  struct malloc_chunk *bk;$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:
bk_nextsize	./malloc.c	/^  struct malloc_chunk *bk_nextsize;$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:
block	./mcheck.c	/^  void *block;                  \/* Real block allocated, for memalign.  *\/$/;"	m	struct:hdr	file:
buffer	./memusage.c	/^static struct entry buffer[2 * DEFAULT_BUFFER_SIZE];$/;"	v	typeref:struct:entry	file:
buffer_cnt	./memusage.c	/^static uatomic32_t buffer_cnt;$/;"	v	file:
buffer_size	./memusage.c	/^static size_t buffer_size;$/;"	v	file:
c	./obstack.c	/^  char c;$/;"	m	struct:fooalign	file:
calloc	./memusage.c	/^calloc (size_t n, size_t len)$/;"	f
callocp	./memusage.c	/^static void *(*callocp) (size_t, size_t);$/;"	v	file:
calls	./memusage.c	/^static memusage_cntr_t calls[idx_last];$/;"	v	file:
calls_total	./memusage.c	/^static memusage_cntr_t calls_total;$/;"	v	file:
check_action	./hooks.c	/^  int check_action;$/;"	m	struct:malloc_save_state	file:
check_chunk	./malloc.c	/^#define check_chunk(/;"	d	file:
check_free_chunk	./malloc.c	/^#define check_free_chunk(/;"	d	file:
check_inuse_chunk	./malloc.c	/^#define check_inuse_chunk(/;"	d	file:
check_malloc_state	./malloc.c	/^#define check_malloc_state(/;"	d	file:
check_malloced_chunk	./malloc.c	/^#define check_malloced_chunk(/;"	d	file:
check_remalloced_chunk	./malloc.c	/^#define check_remalloced_chunk(/;"	d	file:
checkhdr	./mcheck.c	/^checkhdr (const struct hdr *hdr)$/;"	f	file:
chunk	./obstack.h	/^  struct _obstack_chunk *chunk; \/* address of current struct obstack_chunk *\/$/;"	m	struct:obstack	typeref:struct:obstack::_obstack_chunk
chunk2mem	./malloc.c	/^#define chunk2mem(/;"	d	file:
chunk_at_offset	./malloc.c	/^#define chunk_at_offset(/;"	d	file:
chunk_is_mmapped	./malloc.c	/^#define chunk_is_mmapped(/;"	d	file:
chunk_limit	./obstack.h	/^  char *chunk_limit;            \/* address of char after current chunk *\/$/;"	m	struct:obstack
chunk_main_arena	./malloc.c	/^#define chunk_main_arena(/;"	d	file:
chunk_size	./obstack.h	/^  long chunk_size;              \/* preferred size to allocate chunks in *\/$/;"	m	struct:obstack
chunkfun	./obstack.h	/^  struct _obstack_chunk *(*chunkfun) (void *, long);$/;"	m	struct:obstack	typeref:struct:obstack::chunkfun
chunksize	./malloc.c	/^#define chunksize(/;"	d	file:
chunksize_nomask	./malloc.c	/^#define chunksize_nomask(/;"	d	file:
clear	./dynarray-skeleton.c	/^DYNARRAY_NAME (clear) (struct DYNARRAY_STRUCT *list)$/;"	f	file:
clear_inuse	./malloc.c	/^#define clear_inuse(/;"	d	file:
clear_inuse_bit_at_offset	./malloc.c	/^#define clear_inuse_bit_at_offset(/;"	d	file:
contents	./obstack.h	/^  char contents[4];             \/* objects begin here *\/$/;"	m	struct:_obstack_chunk
contiguous	./malloc.c	/^#define contiguous(/;"	d	file:
counts	./malloc.c	/^  uint16_t counts[TCACHE_MAX_BINS];$/;"	m	struct:tcache_perthread_struct	file:
csize2tidx	./malloc.c	/^#define csize2tidx(/;"	d	file:
current_heap	./memusage.c	/^static memusage_size_t current_heap;$/;"	v	file:
d	./obstack.c	/^  long double d;$/;"	m	union:fooround	file:
decreasing	./memusage.c	/^static memusage_cntr_t decreasing;$/;"	v	file:
decreasing_mremap	./memusage.c	/^static memusage_cntr_t decreasing_mremap;$/;"	v	file:
delete_heap	./arena.c	/^#define delete_heap(/;"	d	file:
dest	./memusage.c	/^dest (void)$/;"	f	file:
detach_arena	./arena.c	/^detach_arena(mstate replaced_arena)$/;"	f	file:
do_check_chunk	./malloc.c	/^do_check_chunk(mstate av, mchunkptr p)$/;"	f	file:
do_check_free_chunk	./malloc.c	/^do_check_free_chunk(mstate av, mchunkptr p)$/;"	f	file:
do_check_inuse_chunk	./malloc.c	/^do_check_inuse_chunk(mstate av, mchunkptr p)$/;"	f	file:
do_check_malloc_state	./malloc.c	/^do_check_malloc_state(mstate av)$/;"	f	file:
do_check_malloced_chunk	./malloc.c	/^do_check_malloced_chunk(mstate av, mchunkptr p, INTERNAL_SIZE_T s)$/;"	f	file:
do_check_remalloced_chunk	./malloc.c	/^do_check_remalloced_chunk(mstate av, mchunkptr p, INTERNAL_SIZE_T s)$/;"	f	file:
do_help	./memusage.sh	/^do_help() {$/;"	f
do_missing_arg	./memusage.sh	/^do_missing_arg() {$/;"	f
do_set_arena_max	./malloc.c	/^do_set_arena_max(size_t value)$/;"	f	file:
do_set_arena_test	./malloc.c	/^do_set_arena_test(size_t value)$/;"	f	file:
do_set_mallopt_check	./malloc.c	/^do_set_mallopt_check(int32_t value)$/;"	f	file:
do_set_mmap_threshold	./malloc.c	/^do_set_mmap_threshold(size_t value)$/;"	f	file:
do_set_mmaps_max	./malloc.c	/^do_set_mmaps_max(int32_t value)$/;"	f	file:
do_set_mxfast	./malloc.c	/^    do_set_mxfast(size_t value)$/;"	f	file:
do_set_perturb_byte	./malloc.c	/^do_set_perturb_byte(int32_t value)$/;"	f	file:
do_set_tcache_count	./malloc.c	/^do_set_tcache_count(size_t value)$/;"	f	file:
do_set_tcache_max	./malloc.c	/^do_set_tcache_max(size_t value)$/;"	f	file:
do_set_tcache_unsorted_limit	./malloc.c	/^do_set_tcache_unsorted_limit(size_t value)$/;"	f	file:
do_set_top_pad	./malloc.c	/^do_set_top_pad(size_t value)$/;"	f	file:
do_set_trim_threshold	./malloc.c	/^do_set_trim_threshold(size_t value)$/;"	f	file:
do_usage	./memusage.sh	/^do_usage() {$/;"	f
do_version	./memusage.sh	/^do_version() {$/;"	f
doc	./memusagestat.c	/^static const char doc[] = N_ ("Generate graphic from memory profiling data");$/;"	v	file:
dummy0	./mallocbug.c	/^char *dummy0;$/;"	v
dummy1	./mallocbug.c	/^char *dummy1;$/;"	v
dump_heap	./arena.c	/^dump_heap(heap_info *heap)$/;"	f	file:
dumped_main_arena_end	./malloc.c	/^static mchunkptr dumped_main_arena_end;   \/* Exclusive.  *\/$/;"	v	file:
dumped_main_arena_start	./malloc.c	/^static mchunkptr dumped_main_arena_start; \/* Inclusive.  *\/$/;"	v	file:
dynarray_abstract	./dynarray-skeleton.c	/^    struct dynarray_header dynarray_abstract;$/;"	m	union:DYNARRAY_STRUCT::__anon1	typeref:struct:DYNARRAY_STRUCT::__anon1::dynarray_header	file:
dynarray_finalize_result	./dynarray.h	/^struct dynarray_finalize_result$/;"	s
dynarray_header	./dynarray-skeleton.c	/^    } dynarray_header;$/;"	m	union:DYNARRAY_STRUCT::__anon1	typeref:struct:DYNARRAY_STRUCT::__anon1::__anon2	file:
dynarray_header	./dynarray.h	/^struct dynarray_header$/;"	s
emplace	./dynarray-skeleton.c	/^DYNARRAY_NAME (emplace) (struct DYNARRAY_STRUCT *list)$/;"	f	file:
emplace__	./dynarray-skeleton.c	/^DYNARRAY_NAME (emplace__) (struct DYNARRAY_STRUCT *list)$/;"	f	file:
emplace__tail__	./dynarray-skeleton.c	/^DYNARRAY_NAME (emplace__tail__) (struct DYNARRAY_STRUCT *list)$/;"	f	file:
end	./dynarray-skeleton.c	/^DYNARRAY_NAME (end) (struct DYNARRAY_STRUCT *list)$/;"	f	file:
entries	./malloc.c	/^  tcache_entry *entries[TCACHE_MAX_BINS];$/;"	m	struct:tcache_perthread_struct	file:
entry	./memusage.c	/^struct entry$/;"	s	file:
entry	./memusagestat.c	/^struct entry$/;"	s	file:
extra_arg	./obstack.h	/^  void *extra_arg;              \/* first arg for chunk alloc\/dealloc funcs *\/$/;"	m	struct:obstack
failed	./memusage.c	/^static memusage_cntr_t failed[idx_last];$/;"	v	file:
fastbin	./malloc.c	/^#define fastbin(/;"	d	file:
fastbin_index	./malloc.c	/^#define fastbin_index(/;"	d	file:
fastbinsY	./malloc.c	/^  mfastbinptr fastbinsY[NFASTBINS];$/;"	m	struct:malloc_state	file:
fd	./malloc.c	/^  struct malloc_chunk *fd; \/* double links -- used only if free. *\/$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:
fd	./memusage.c	/^static int fd = -1;$/;"	v	file:
fd_nextsize	./malloc.c	/^  struct malloc_chunk *fd_nextsize; \/* double links -- used only if free. *\/$/;"	m	struct:malloc_chunk	typeref:struct:malloc_chunk::malloc_chunk	file:
fill_info_table1	./mallocbug.c	/^char *fill_info_table1;$/;"	v
finalize	./dynarray-skeleton.c	/^DYNARRAY_NAME (finalize) (struct DYNARRAY_STRUCT *list, size_t *lengthp)$/;"	f	file:
finalize	./dynarray-skeleton.c	/^DYNARRAY_NAME (finalize) (struct DYNARRAY_STRUCT *list,$/;"	f	file:
first	./malloc.c	/^#define first(/;"	d	file:
first	./memusage.c	/^static struct entry first;$/;"	v	typeref:struct:entry	file:
flags	./malloc.c	/^  int flags;$/;"	m	struct:malloc_state	file:
flood	./mcheck.c	/^# define flood /;"	d	file:
flood	./mcheck.c	/^flood (void *ptr, int val, size_t size)$/;"	f	file:
fooalign	./obstack.c	/^struct fooalign$/;"	s	file:
fooround	./obstack.c	/^union fooround$/;"	u	file:
fordblks	./malloc.h	/^  int fordblks; \/* total free space *\/$/;"	m	struct:mallinfo
free	./dynarray-skeleton.c	/^DYNARRAY_NAME (free) (struct DYNARRAY_STRUCT *list)$/;"	f	file:
free	./memusage.c	/^free (void *ptr)$/;"	f
free__array__	./dynarray-skeleton.c	/^DYNARRAY_NAME (free__array__) (struct DYNARRAY_STRUCT *list)$/;"	f	file:
free__elements__	./dynarray-skeleton.c	/^DYNARRAY_NAME (free__elements__) (DYNARRAY_ELEMENT *__dynarray_array,$/;"	f	file:
free_check	./hooks.c	/^free_check (void *mem, const void *caller)$/;"	f	file:
free_list	./arena.c	/^static mstate free_list;$/;"	v	file:
free_perturb	./malloc.c	/^free_perturb(char *p, size_t n)$/;"	f	file:
freefun	./obstack.h	/^  void (*freefun) (void *, struct _obstack_chunk *);$/;"	m	struct:obstack
freehook	./mcheck.c	/^freehook (void *ptr, const void *caller)$/;"	f	file:
freep	./memusage.c	/^static void (*freep) (void *);$/;"	v	file:
fsmblks	./malloc.h	/^  int fsmblks;  \/* space available in freed fastbin blocks *\/$/;"	m	struct:mallinfo
fwrite	./mtrace.c	/^#define fwrite(/;"	d	file:
get_binmap	./malloc.c	/^#define get_binmap(/;"	d	file:
get_free_list	./arena.c	/^get_free_list(void)$/;"	f	file:
get_max_fast	./malloc.c	/^get_max_fast(void)$/;"	f	file:
global_max_fast	./malloc.c	/^static INTERNAL_SIZE_T global_max_fast;$/;"	v	file:
grand_total	./memusage.c	/^static memusage_size_t grand_total;$/;"	v	file:
grow_heap	./arena.c	/^grow_heap(heap_info *h, long diff)$/;"	f	file:
has_failed	./dynarray-skeleton.c	/^DYNARRAY_NAME (has_failed) (const struct DYNARRAY_STRUCT *list)$/;"	f	file:
have_fastchunks	./malloc.c	/^  int have_fastchunks;$/;"	m	struct:malloc_state	file:
hblkhd	./malloc.h	/^  int hblkhd;   \/* space in mmapped regions *\/$/;"	m	struct:mallinfo
hblks	./malloc.h	/^  int hblks;    \/* number of mmapped regions *\/$/;"	m	struct:mallinfo
hdr	./mcheck.c	/^struct hdr$/;"	s	file:
header	./memusage.c	/^struct header$/;"	s	file:
heap	./memusage.c	/^  uint64_t heap;$/;"	m	struct:entry	file:
heap	./memusagestat.c	/^  uint64_t heap;$/;"	m	struct:entry	file:
heap_for_ptr	./arena.c	/^#define heap_for_ptr(/;"	d	file:
heap_info	./arena.c	/^} heap_info;$/;"	t	typeref:struct:_heap_info	file:
heap_trim	./arena.c	/^heap_trim(heap_info *heap, size_t pad)$/;"	f	file:
histogram	./memusage.c	/^static memusage_cntr_t histogram[65536 \/ 16];$/;"	v	file:
i	./obstack.c	/^  uintmax_t i;$/;"	m	union:fooround	file:
idx2bit	./malloc.c	/^#define idx2bit(/;"	d	file:
idx2block	./malloc.c	/^#define idx2block(/;"	d	file:
idx_calloc	./memusage.c	/^  idx_calloc,$/;"	e	enum:__anon3	file:
idx_free	./memusage.c	/^  idx_free,$/;"	e	enum:__anon3	file:
idx_last	./memusage.c	/^  idx_last$/;"	e	enum:__anon3	file:
idx_malloc	./memusage.c	/^  idx_malloc = 0,$/;"	e	enum:__anon3	file:
idx_mmap_a	./memusage.c	/^  idx_mmap_a,$/;"	e	enum:__anon3	file:
idx_mmap_r	./memusage.c	/^  idx_mmap_r,$/;"	e	enum:__anon3	file:
idx_mmap_w	./memusage.c	/^  idx_mmap_w,$/;"	e	enum:__anon3	file:
idx_mremap	./memusage.c	/^  idx_mremap,$/;"	e	enum:__anon3	file:
idx_munmap	./memusage.c	/^  idx_munmap,$/;"	e	enum:__anon3	file:
idx_realloc	./memusage.c	/^  idx_realloc,$/;"	e	enum:__anon3	file:
in_smallbin_range	./malloc.c	/^#define in_smallbin_range(/;"	d	file:
init	./dynarray-skeleton.c	/^DYNARRAY_NAME (init) (struct DYNARRAY_STRUCT *list)$/;"	f	file:
init	./memusage.c	/^init (void)$/;"	f	file:
initial_top	./malloc.c	/^#define initial_top(/;"	d	file:
initialized	./memusage.c	/^static int initialized;$/;"	v	file:
inplace	./memusage.c	/^static memusage_cntr_t inplace;$/;"	v	file:
inplace_mremap	./memusage.c	/^static memusage_cntr_t inplace_mremap;$/;"	v	file:
int_handler	./memusage.c	/^int_handler (int signo)$/;"	f	file:
int_mallinfo	./malloc.c	/^int_mallinfo(mstate av, struct mallinfo *m)$/;"	f	file:
inuse	./malloc.c	/^#define inuse(/;"	d	file:
inuse_bit_at_offset	./malloc.c	/^#define inuse_bit_at_offset(/;"	d	file:
keepcost	./malloc.h	/^  int keepcost; \/* top-most, releasable (via malloc_trim) space *\/$/;"	m	struct:mallinfo
key	./malloc.c	/^  struct tcache_perthread_struct *key;$/;"	m	struct:tcache_entry	typeref:struct:tcache_entry::tcache_perthread_struct	file:
large	./memusage.c	/^static memusage_cntr_t large;$/;"	v	file:
largebin_index	./malloc.c	/^#define largebin_index(/;"	d	file:
largebin_index_32	./malloc.c	/^#define largebin_index_32(/;"	d	file:
largebin_index_32_big	./malloc.c	/^#define largebin_index_32_big(/;"	d	file:
largebin_index_64	./malloc.c	/^#define largebin_index_64(/;"	d	file:
last	./malloc.c	/^#define last(/;"	d	file:
last_remainder	./malloc.c	/^  mchunkptr last_remainder;$/;"	m	struct:malloc_state	file:
length	./dynarray.h	/^  size_t length;$/;"	m	struct:dynarray_finalize_result
length	./memusage.c	/^  size_t length;$/;"	m	struct:header	file:
libc_hidden_def	./malloc.c	/^libc_hidden_def(__libc_free)$/;"	f
libc_hidden_def	./malloc.c	/^libc_hidden_def(__libc_malloc)$/;"	f
libc_hidden_def	./malloc.c	/^libc_hidden_def(__libc_realloc)$/;"	f
libc_hidden_def	./mcheck.c	/^libc_hidden_def (mcheck)$/;"	f
libc_hidden_proto	./morecore.c	/^libc_hidden_proto (__sbrk)$/;"	f
libc_hidden_proto	./mtrace.c	/^libc_hidden_proto (tr_break)$/;"	f
limit	./obstack.h	/^  char *limit;                  \/* 1 past end of this chunk *\/$/;"	m	struct:_obstack_chunk
link_blk	./mcheck.c	/^link_blk (struct hdr *hdr)$/;"	f	file:
location	./mtrace.pl	/^sub location {$/;"	s
lock_and_info	./mtrace.c	/^lock_and_info (const void *caller, Dl_info *mem)$/;"	f	file:
mabort	./mcheck.c	/^mabort (enum mcheck_status status)$/;"	f	file:
magic	./hooks.c	/^  long magic;$/;"	m	struct:malloc_save_state	file:
magic	./mcheck.c	/^  unsigned long int magic;      \/* Magic number to check header integrity.  *\/$/;"	m	struct:hdr	file:
magic	./memusage.c	/^  size_t magic;$/;"	m	struct:header	file:
magic2	./mcheck.c	/^  unsigned long int magic2;     \/* Extra, keeps us doubleword aligned.  *\/$/;"	m	struct:hdr	file:
magicbyte	./hooks.c	/^magicbyte (const void *p)$/;"	f	file:
main	./mallocbug.c	/^main (int argc, char *argv[])$/;"	f
main	./memusagestat.c	/^main (int argc, char *argv[])$/;"	f
main_arena	./malloc.c	/^static struct malloc_state main_arena =$/;"	v	typeref:struct:malloc_state	file:
mallenv	./mtrace.c	/^static const char mallenv[] = "MALLOC_TRACE";$/;"	v	file:
mallinfo	./malloc.h	/^struct mallinfo$/;"	s
malloc	./memusage.c	/^malloc (size_t len)$/;"	f
malloc_check	./hooks.c	/^malloc_check (size_t sz, const void *caller)$/;"	f	file:
malloc_check_get_size	./hooks.c	/^malloc_check_get_size (mchunkptr p)$/;"	f	file:
malloc_chunk	./malloc.c	/^struct malloc_chunk$/;"	s	file:
malloc_consolidate	./malloc.c	/^static void malloc_consolidate(mstate av)$/;"	f	file:
malloc_get_state	./hooks.c	/^malloc_get_state (void)$/;"	f
malloc_hook_ini	./hooks.c	/^malloc_hook_ini (size_t sz, const void *caller)$/;"	f	file:
malloc_init_state	./malloc.c	/^malloc_init_state(mstate av)$/;"	f	file:
malloc_opt_barrier	./mcheck.c	/^#define malloc_opt_barrier(/;"	d	file:
malloc_par	./malloc.c	/^struct malloc_par$/;"	s	file:
malloc_printerr	./malloc.c	/^malloc_printerr(const char *str)$/;"	f	file:
malloc_save_state	./hooks.c	/^struct malloc_save_state$/;"	s	file:
malloc_set_state	./hooks.c	/^malloc_set_state (void *msptr)$/;"	f
malloc_state	./malloc.c	/^struct malloc_state$/;"	s	file:
malloc_trace_buffer	./mtrace.c	/^static char *malloc_trace_buffer;$/;"	v	file:
mallochook	./mcheck.c	/^mallochook (size_t size, const void *caller)$/;"	f	file:
mallocp	./memusage.c	/^static void *(*mallocp)(size_t);$/;"	v	file:
mallstream	./mtrace.c	/^static FILE *mallstream;$/;"	v	file:
mallwatch	./mtrace.c	/^void *mallwatch;$/;"	v
mark_bin	./malloc.c	/^#define mark_bin(/;"	d	file:
mark_failed	./dynarray-skeleton.c	/^DYNARRAY_NAME (mark_failed) (struct DYNARRAY_STRUCT *list)$/;"	f	file:
max_fast	./hooks.c	/^  unsigned long max_fast;$/;"	m	struct:malloc_save_state	file:
max_mmapped_mem	./hooks.c	/^  unsigned long max_mmapped_mem;$/;"	m	struct:malloc_save_state	file:
max_mmapped_mem	./malloc.c	/^  INTERNAL_SIZE_T max_mmapped_mem;$/;"	m	struct:malloc_par	file:
max_n_mmaps	./hooks.c	/^  unsigned int max_n_mmaps;$/;"	m	struct:malloc_save_state	file:
max_n_mmaps	./malloc.c	/^  int max_n_mmaps;$/;"	m	struct:malloc_par	file:
max_sbrked_mem	./hooks.c	/^  unsigned long max_sbrked_mem;$/;"	m	struct:malloc_save_state	file:
max_system_mem	./malloc.c	/^  INTERNAL_SIZE_T max_system_mem;$/;"	m	struct:malloc_state	file:
max_total_mem	./hooks.c	/^  unsigned long max_total_mem;	\/* Always 0, for backwards compatibility.  *\/$/;"	m	struct:malloc_save_state	file:
maybe_empty_object	./obstack.h	/^  unsigned maybe_empty_object : 1; \/* There is a possibility that the current$/;"	m	struct:obstack
mbinptr	./malloc.c	/^typedef struct malloc_chunk *mbinptr;$/;"	t	typeref:struct:malloc_chunk	file:
mcheck	./mcheck.c	/^mcheck (void (*func) (enum mcheck_status))$/;"	f
mcheck_check_all	./mcheck.c	/^mcheck_check_all (void)$/;"	f
mcheck_status	./mcheck.h	/^enum mcheck_status$/;"	g
mcheck_used	./mcheck.c	/^static int mcheck_used;$/;"	v	file:
mchunk_prev_size	./malloc.c	/^  INTERNAL_SIZE_T mchunk_prev_size; \/* Size of previous chunk (if free).  *\/$/;"	m	struct:malloc_chunk	file:
mchunk_size	./malloc.c	/^  INTERNAL_SIZE_T mchunk_size;      \/* Size in bytes, including overhead. *\/$/;"	m	struct:malloc_chunk	file:
mchunkptr	./malloc.c	/^typedef struct malloc_chunk *mchunkptr;$/;"	t	typeref:struct:malloc_chunk	file:
me	./memusage.c	/^me (void)$/;"	f	file:
mem2chunk	./malloc.c	/^#define mem2chunk(/;"	d	file:
mem2chunk_check	./hooks.c	/^mem2chunk_check (void *mem, unsigned char **magic_p)$/;"	f	file:
mem2mem_check	./hooks.c	/^mem2mem_check (void *ptr, size_t req_sz)$/;"	f	file:
memalign_check	./hooks.c	/^memalign_check (size_t alignment, size_t bytes, const void *caller)$/;"	f	file:
memalign_hook_ini	./hooks.c	/^memalign_hook_ini (size_t alignment, size_t sz, const void *caller)$/;"	f	file:
memalignhook	./mcheck.c	/^memalignhook (size_t alignment, size_t size,$/;"	f	file:
mfastbinptr	./malloc.c	/^typedef struct malloc_chunk *mfastbinptr;$/;"	t	typeref:struct:malloc_chunk	file:
misaligned_chunk	./malloc.c	/^#define misaligned_chunk(/;"	d	file:
mmap	./memusage.c	/^mmap (void *start, size_t len, int prot, int flags, int fd, off_t offset)$/;"	f
mmap64	./memusage.c	/^mmap64 (void *start, size_t len, int prot, int flags, int fd, off64_t offset)$/;"	f
mmap64p	./memusage.c	/^static void *(*mmap64p) (void *, size_t, int, int, int, off64_t);$/;"	v	file:
mmap_threshold	./hooks.c	/^  unsigned long mmap_threshold;$/;"	m	struct:malloc_save_state	file:
mmap_threshold	./malloc.c	/^  INTERNAL_SIZE_T mmap_threshold;$/;"	m	struct:malloc_par	file:
mmapp	./memusage.c	/^static void *(*mmapp) (void *, size_t, int, int, int, off_t);$/;"	v	file:
mmapped_mem	./hooks.c	/^  unsigned long mmapped_mem;$/;"	m	struct:malloc_save_state	file:
mmapped_mem	./malloc.c	/^  INTERNAL_SIZE_T mmapped_mem;$/;"	m	struct:malloc_par	file:
more_help	./memusagestat.c	/^more_help (int key, const char *text, void *input)$/;"	f	file:
mp_	./malloc.c	/^static struct malloc_par mp_ =$/;"	v	typeref:struct:malloc_par	file:
mprobe	./mcheck.c	/^mprobe (void *ptr)$/;"	f
mprotect_size	./arena.c	/^  size_t mprotect_size;    \/* Size in bytes that has been mprotected$/;"	m	struct:_heap_info	file:
mremap	./memusage.c	/^mremap (void *start, size_t old_len, size_t len, int flags, ...)$/;"	f
mremap_chunk	./malloc.c	/^mremap_chunk(mchunkptr p, size_t new_size)$/;"	f	file:
mremapp	./memusage.c	/^static void *(*mremapp) (void *, size_t, size_t, int, void *);$/;"	v	file:
mtrace	./mtrace.c	/^mtrace (void)$/;"	f
mtrim	./malloc.c	/^mtrim(mstate av, size_t pad)$/;"	f	file:
munmap	./memusage.c	/^munmap (void *start, size_t len)$/;"	f
munmap_chunk	./malloc.c	/^munmap_chunk(mchunkptr p)$/;"	f	file:
munmapp	./memusage.c	/^static int (*munmapp) (void *, size_t);$/;"	v	file:
muntrace	./mtrace.c	/^muntrace (void)$/;"	f
musable	./malloc.c	/^musable(void *mem)$/;"	f	file:
n_mmaps	./hooks.c	/^  unsigned int n_mmaps;$/;"	m	struct:malloc_save_state	file:
n_mmaps	./malloc.c	/^  int n_mmaps;$/;"	m	struct:malloc_par	file:
n_mmaps_max	./hooks.c	/^  unsigned int n_mmaps_max;$/;"	m	struct:malloc_save_state	file:
n_mmaps_max	./malloc.c	/^  int n_mmaps_max;$/;"	m	struct:malloc_par	file:
narenas	./arena.c	/^static size_t narenas = 1;$/;"	v	file:
narenas	./hooks.c	/^  unsigned long narenas;$/;"	m	struct:malloc_save_state	file:
new_heap	./arena.c	/^new_heap(size_t size, size_t top_pad)$/;"	f	file:
next	./malloc.c	/^  struct malloc_state *next;$/;"	m	struct:malloc_state	typeref:struct:malloc_state::malloc_state	file:
next	./malloc.c	/^  struct tcache_entry *next;$/;"	m	struct:tcache_entry	typeref:struct:tcache_entry::tcache_entry	file:
next	./mcheck.c	/^  struct hdr *next;$/;"	m	struct:hdr	typeref:struct:hdr::hdr	file:
next_bin	./malloc.c	/^#define next_bin(/;"	d	file:
next_chunk	./malloc.c	/^#define next_chunk(/;"	d	file:
next_free	./malloc.c	/^  struct malloc_state *next_free;$/;"	m	struct:malloc_state	typeref:struct:malloc_state::malloc_state	file:
next_free	./obstack.h	/^  char *next_free;              \/* where to add next char to current object *\/$/;"	m	struct:obstack
no_dyn_threshold	./malloc.c	/^  int no_dyn_threshold;$/;"	m	struct:malloc_par	file:
noncontiguous	./malloc.c	/^#define noncontiguous(/;"	d	file:
not_me	./memusage.c	/^static bool not_me;$/;"	v	file:
nsizes	./malloc.c	/^#define nsizes /;"	d	file:
object_base	./obstack.h	/^  char *object_base;            \/* address of object we are building *\/$/;"	m	struct:obstack
obstack	./obstack.h	/^struct obstack          \/* control current object in current chunk *\/$/;"	s
obstack_1grow	./obstack.h	/^# define obstack_1grow(/;"	d
obstack_1grow_fast	./obstack.h	/^#define obstack_1grow_fast(/;"	d
obstack_alignment_mask	./obstack.h	/^#define obstack_alignment_mask(/;"	d
obstack_alloc	./obstack.h	/^# define obstack_alloc(/;"	d
obstack_alloc_failed_handler	./obstack.c	/^void (*obstack_alloc_failed_handler) (void) = print_and_abort;$/;"	v
obstack_base	./obstack.h	/^#define obstack_base(/;"	d
obstack_begin	./obstack.h	/^#define obstack_begin(/;"	d
obstack_blank	./obstack.h	/^# define obstack_blank(/;"	d
obstack_blank_fast	./obstack.h	/^#define obstack_blank_fast(/;"	d
obstack_chunk_size	./obstack.h	/^#define obstack_chunk_size(/;"	d
obstack_chunkfun	./obstack.h	/^#define obstack_chunkfun(/;"	d
obstack_copy	./obstack.h	/^# define obstack_copy(/;"	d
obstack_copy0	./obstack.h	/^# define obstack_copy0(/;"	d
obstack_empty_p	./obstack.h	/^# define obstack_empty_p(/;"	d
obstack_exit_failure	./obstack.c	/^#  define obstack_exit_failure /;"	d	file:
obstack_exit_failure	./obstack.c	/^int obstack_exit_failure = EXIT_FAILURE;$/;"	v
obstack_finish	./obstack.h	/^# define obstack_finish(/;"	d
obstack_free	./obstack.c	/^# undef obstack_free$/;"	d	file:
obstack_free	./obstack.h	/^# define obstack_free(/;"	d
obstack_freefun	./obstack.h	/^#define obstack_freefun(/;"	d
obstack_grow	./obstack.h	/^# define obstack_grow(/;"	d
obstack_grow0	./obstack.h	/^# define obstack_grow0(/;"	d
obstack_init	./obstack.h	/^#define obstack_init(/;"	d
obstack_int_grow	./obstack.h	/^# define obstack_int_grow(/;"	d
obstack_int_grow_fast	./obstack.h	/^# define obstack_int_grow_fast(/;"	d
obstack_make_room	./obstack.h	/^# define obstack_make_room(/;"	d
obstack_memory_used	./obstack.h	/^#define obstack_memory_used(/;"	d
obstack_next_free	./obstack.h	/^#define obstack_next_free(/;"	d
obstack_object_size	./obstack.h	/^# define obstack_object_size(/;"	d
obstack_ptr_grow	./obstack.h	/^# define obstack_ptr_grow(/;"	d
obstack_ptr_grow_fast	./obstack.h	/^# define obstack_ptr_grow_fast(/;"	d
obstack_room	./obstack.h	/^# define obstack_room(/;"	d
obstack_specify_allocation	./obstack.h	/^#define obstack_specify_allocation(/;"	d
obstack_specify_allocation_with_arg	./obstack.h	/^#define obstack_specify_allocation_with_arg(/;"	d
old_free_hook	./mcheck.c	/^static void (*old_free_hook)(void *ptr, const void *);$/;"	v	file:
old_malloc_hook	./mcheck.c	/^static void *(*old_malloc_hook) (size_t size, const void *);$/;"	v	file:
old_memalign_hook	./mcheck.c	/^static void *(*old_memalign_hook) (size_t alignment, size_t size,$/;"	v	file:
old_realloc_hook	./mcheck.c	/^static void *(*old_realloc_hook) (void *ptr, size_t size,$/;"	v	file:
options	./memusagestat.c	/^static const struct argp_option options[] =$/;"	v	typeref:struct:argp_option	file:
ordblks	./malloc.h	/^  int ordblks;  \/* number of free chunks *\/$/;"	m	struct:mallinfo
outname	./memusagestat.c	/^static char *outname;$/;"	v	file:
p	./obstack.c	/^  void *p;$/;"	m	union:fooround	file:
pad	./arena.c	/^  char pad[-6 * SIZE_SZ & MALLOC_ALIGN_MASK];$/;"	m	struct:_heap_info	file:
parse_opt	./memusagestat.c	/^parse_opt (int key, char *arg, struct argp_state *state)$/;"	f	file:
peak_heap	./memusage.c	/^#define peak_heap /;"	d	file:
peak_stack	./memusage.c	/^#define peak_stack /;"	d	file:
peak_total	./memusage.c	/^#define peak_total /;"	d	file:
peak_use	./memusage.c	/^static memusage_size_t peak_use[3];$/;"	v	file:
pedantic	./mcheck.c	/^static int pedantic;$/;"	v	file:
perturb_byte	./malloc.c	/^static int perturb_byte;$/;"	v	file:
prev	./arena.c	/^  struct _heap_info *prev; \/* Previous heap. *\/ \/\/ 指向上一个 heap$/;"	m	struct:_heap_info	typeref:struct:_heap_info::_heap_info	file:
prev	./mcheck.c	/^  struct hdr *prev;$/;"	m	struct:hdr	typeref:struct:hdr::hdr	file:
prev	./obstack.h	/^  struct _obstack_chunk *prev;  \/* address of prior chunk or NULL *\/$/;"	m	struct:_obstack_chunk	typeref:struct:_obstack_chunk::_obstack_chunk
prev_chunk	./malloc.c	/^#define prev_chunk(/;"	d	file:
prev_inuse	./malloc.c	/^#define prev_inuse(/;"	d	file:
prev_size	./malloc.c	/^#define prev_size(/;"	d	file:
print_and_abort	./obstack.c	/^print_and_abort (void)$/;"	f	file:
print_version	./memusagestat.c	/^print_version (FILE *stream, struct argp_state *state)$/;"	f	file:
ptmalloc_init	./arena.c	/^ptmalloc_init(void)$/;"	f	file:
realloc	./memusage.c	/^realloc (void *old, size_t len)$/;"	f
realloc_check	./hooks.c	/^realloc_check (void *oldmem, size_t bytes, const void *caller)$/;"	f	file:
realloc_free	./memusage.c	/^static memusage_cntr_t realloc_free;$/;"	v	file:
realloc_hook_ini	./hooks.c	/^realloc_hook_ini (void *ptr, size_t sz, const void *caller)$/;"	f	file:
reallochook	./mcheck.c	/^reallochook (void *ptr, size_t size, const void *caller)$/;"	f	file:
reallocp	./memusage.c	/^static void *(*reallocp) (void *, size_t);$/;"	v	file:
release_libc_mem	./mtrace.c	/^release_libc_mem (void)$/;"	f	file:
remove_from_free_list	./arena.c	/^remove_from_free_list(mstate arena)$/;"	f	file:
remove_last	./dynarray-skeleton.c	/^DYNARRAY_NAME (remove_last) (struct DYNARRAY_STRUCT *list)$/;"	f	file:
request2size	./malloc.c	/^#define request2size(/;"	d	file:
resize	./dynarray-skeleton.c	/^DYNARRAY_NAME (resize) (struct DYNARRAY_STRUCT *list, size_t size)$/;"	f	file:
reused_arena	./arena.c	/^reused_arena(mstate avoid_arena)$/;"	f	file:
root	./mcheck.c	/^static struct hdr *root;$/;"	v	typeref:struct:hdr	file:
save_default_hooks	./mtrace.c	/^save_default_hooks (void)$/;"	f	file:
sbrk_base	./hooks.c	/^  char *sbrk_base;$/;"	m	struct:malloc_save_state	file:
sbrk_base	./malloc.c	/^  char *sbrk_base;$/;"	m	struct:malloc_par	file:
sbrked_mem_bytes	./hooks.c	/^  int sbrked_mem_bytes;$/;"	m	struct:malloc_save_state	file:
scratch	./dynarray-skeleton.c	/^  DYNARRAY_ELEMENT scratch[DYNARRAY_INITIAL_SIZE];$/;"	m	struct:DYNARRAY_STRUCT	file:
set_contiguous	./malloc.c	/^#define set_contiguous(/;"	d	file:
set_default_hooks	./mtrace.c	/^set_default_hooks (void)$/;"	f	file:
set_foot	./malloc.c	/^#define set_foot(/;"	d	file:
set_head	./malloc.c	/^#define set_head(/;"	d	file:
set_head_size	./malloc.c	/^#define set_head_size(/;"	d	file:
set_inuse	./malloc.c	/^#define set_inuse(/;"	d	file:
set_inuse_bit_at_offset	./malloc.c	/^#define set_inuse_bit_at_offset(/;"	d	file:
set_mallopt_check	./arena.c	/^    TUNABLE_CALLBACK(set_mallopt_check)(tunable_val_t *valp)$/;"	f
set_max_fast	./malloc.c	/^#define set_max_fast(/;"	d	file:
set_non_main_arena	./malloc.c	/^#define set_non_main_arena(/;"	d	file:
set_noncontiguous	./malloc.c	/^#define set_noncontiguous(/;"	d	file:
set_prev_size	./malloc.c	/^#define set_prev_size(/;"	d	file:
set_trace_hooks	./mtrace.c	/^set_trace_hooks (void)$/;"	f	file:
setvbuf	./mtrace.c	/^#define setvbuf(/;"	d	file:
shrink_heap	./arena.c	/^shrink_heap(heap_info *h, long diff)$/;"	f	file:
size	./arena.c	/^  size_t size;             \/* Current size in bytes. *\/ \/\/ 当前 heap 的 大小$/;"	m	struct:_heap_info	file:
size	./dynarray-skeleton.c	/^DYNARRAY_NAME (size) (const struct DYNARRAY_STRUCT *list)$/;"	f	file:
size	./mcheck.c	/^  size_t size;                  \/* Exact size requested by user.  *\/$/;"	m	struct:hdr	file:
size_t	./mallocbug.c	/^#define size_t /;"	d	file:
smallbin_index	./malloc.c	/^#define smallbin_index(/;"	d	file:
smblks	./malloc.h	/^  int smblks;   \/* number of fastbin blocks *\/$/;"	m	struct:mallinfo
stack	./memusage.c	/^  uint64_t stack;$/;"	m	struct:entry	file:
stack	./memusagestat.c	/^  uint64_t stack;$/;"	m	struct:entry	file:
start_sp	./memusage.c	/^static __thread uintptr_t start_sp;$/;"	v	file:
string	./memusagestat.c	/^static const char *string;$/;"	v	file:
strong_alias	./obstack.c	/^strong_alias (obstack_free, _obstack_free)$/;"	f
sysmalloc	./malloc.c	/^sysmalloc(INTERNAL_SIZE_T nb, mstate av)$/;"	f	file:
system_mem	./malloc.c	/^  INTERNAL_SIZE_T system_mem;$/;"	m	struct:malloc_state	file:
systrim	./malloc.c	/^systrim(size_t pad, mstate av)$/;"	f	file:
tcache	./malloc.c	/^static __thread tcache_perthread_struct *tcache = NULL;$/;"	v	file:
tcache_bins	./malloc.c	/^  size_t tcache_bins;$/;"	m	struct:malloc_par	file:
tcache_count	./malloc.c	/^  size_t tcache_count;$/;"	m	struct:malloc_par	file:
tcache_entry	./malloc.c	/^typedef struct tcache_entry$/;"	s	file:
tcache_entry	./malloc.c	/^} tcache_entry;$/;"	t	typeref:struct:tcache_entry	file:
tcache_get	./malloc.c	/^tcache_get(size_t tc_idx)$/;"	f	file:
tcache_init	./malloc.c	/^tcache_init(void)$/;"	f	file:
tcache_max_bytes	./malloc.c	/^  size_t tcache_max_bytes;$/;"	m	struct:malloc_par	file:
tcache_perthread_struct	./malloc.c	/^typedef struct tcache_perthread_struct$/;"	s	file:
tcache_perthread_struct	./malloc.c	/^} tcache_perthread_struct;$/;"	t	typeref:struct:tcache_perthread_struct	file:
tcache_put	./malloc.c	/^tcache_put(mchunkptr chunk, size_t tc_idx)$/;"	f	file:
tcache_shutting_down	./malloc.c	/^static __thread bool tcache_shutting_down = false;$/;"	v	file:
tcache_thread_shutdown	./malloc.c	/^tcache_thread_shutdown(void)$/;"	f	file:
tcache_unsorted_limit	./malloc.c	/^  size_t tcache_unsorted_limit;$/;"	m	struct:malloc_par	file:
temp	./obstack.h	/^  } temp;                       \/* Temporary for some macros.  *\/$/;"	m	struct:obstack	typeref:union:obstack::__anon5
tempint	./obstack.h	/^    PTR_INT_TYPE tempint;$/;"	m	union:obstack::__anon5
tempptr	./obstack.h	/^    void *tempptr;$/;"	m	union:obstack::__anon5
tidx2usize	./malloc.c	/^#define tidx2usize(/;"	d	file:
time_based	./memusagestat.c	/^static int time_based;$/;"	v	file:
time_high	./memusage.c	/^  uint32_t time_high;$/;"	m	struct:entry	file:
time_high	./memusagestat.c	/^  uint32_t time_high;$/;"	m	struct:entry	file:
time_low	./memusage.c	/^  uint32_t time_low;$/;"	m	struct:entry	file:
time_low	./memusagestat.c	/^  uint32_t time_low;$/;"	m	struct:entry	file:
top	./arena.c	/^#define top(/;"	d	file:
top	./malloc.c	/^  mchunkptr top;$/;"	m	struct:malloc_state	file:
top_check	./hooks.c	/^top_check (void)$/;"	f	file:
top_pad	./hooks.c	/^  unsigned long top_pad;$/;"	m	struct:malloc_save_state	file:
top_pad	./malloc.c	/^  INTERNAL_SIZE_T top_pad;$/;"	m	struct:malloc_par	file:
total	./memusage.c	/^static memusage_size_t total[idx_last];$/;"	v	file:
tr_freehook	./mtrace.c	/^tr_freehook (void *ptr, const void *caller)$/;"	f	file:
tr_mallochook	./mtrace.c	/^tr_mallochook (size_t size, const void *caller)$/;"	f	file:
tr_memalignhook	./mtrace.c	/^tr_memalignhook (size_t alignment, size_t size, const void *caller)$/;"	f	file:
tr_old_free_hook	./mtrace.c	/^static void (*tr_old_free_hook) (void *ptr, const void *);$/;"	v	file:
tr_old_malloc_hook	./mtrace.c	/^static void *(*tr_old_malloc_hook) (size_t size, const void *);$/;"	v	file:
tr_old_memalign_hook	./mtrace.c	/^static void *(*tr_old_memalign_hook) (size_t __alignment, size_t __size,$/;"	v	file:
tr_old_realloc_hook	./mtrace.c	/^static void *(*tr_old_realloc_hook) (void *ptr, size_t size,$/;"	v	file:
tr_reallochook	./mtrace.c	/^tr_reallochook (void *ptr, size_t size, const void *caller)$/;"	f	file:
tr_where	./mtrace.c	/^tr_where (const void *caller, Dl_info *info)$/;"	f	file:
trace_mmap	./memusage.c	/^static bool trace_mmap;$/;"	v	file:
trim_threshold	./hooks.c	/^  unsigned long trim_threshold;$/;"	m	struct:malloc_save_state	file:
trim_threshold	./malloc.c	/^  unsigned long trim_threshold;$/;"	m	struct:malloc_par	file:
turn_on_mcheck	./mcheck-init.c	/^turn_on_mcheck (void)$/;"	f	file:
u	./obstack.c	/^  union fooround u;$/;"	m	struct:fooalign	typeref:union:fooalign::fooround	file:
unlink_blk	./mcheck.c	/^unlink_blk (struct hdr *ptr)$/;"	f	file:
unlink_chunk	./malloc.c	/^unlink_chunk(mstate av, mchunkptr p)$/;"	f	file:
unmark_bin	./malloc.c	/^#define unmark_bin(/;"	d	file:
unsorted_chunks	./malloc.c	/^#define unsorted_chunks(/;"	d	file:
uordblks	./malloc.h	/^  int uordblks; \/* total allocated space *\/$/;"	m	struct:mallinfo
update_data	./memusage.c	/^update_data (struct header *result, size_t len, size_t old_len)$/;"	f	file:
usage	./mtrace.pl	/^sub usage {$/;"	s
use_extra_arg	./obstack.h	/^  unsigned use_extra_arg : 1;     \/* chunk alloc\/dealloc funcs take extra arg *\/$/;"	m	struct:obstack
used	./dynarray-skeleton.c	/^      size_t used;$/;"	m	struct:DYNARRAY_STRUCT::__anon1::__anon2	file:
used	./dynarray.h	/^  size_t used;$/;"	m	struct:dynarray_header
using_malloc_checking	./hooks.c	/^  int using_malloc_checking;$/;"	m	struct:malloc_save_state	file:
using_malloc_checking	./hooks.c	/^static int using_malloc_checking;$/;"	v	file:
usize2tidx	./malloc.c	/^#define usize2tidx(/;"	d	file:
usmblks	./malloc.h	/^  int usmblks;  \/* always 0, preserved for backwards compatibility *\/$/;"	m	struct:mallinfo
version	./hooks.c	/^  long version;$/;"	m	struct:malloc_save_state	file:
void	./malloc.c	/^#define void /;"	d	file:
weak_alias	./malloc.c	/^weak_alias(__libc_memalign, aligned_alloc)$/;"	f
weak_alias	./malloc.c	/^weak_alias(__posix_memalign, posix_memalign)$/;"	f
weak_variable	./malloc.c	/^#define weak_variable /;"	d	file:
xsize	./memusagestat.c	/^static size_t xsize;$/;"	v	file:
ysize	./memusagestat.c	/^static size_t ysize;$/;"	v	file:
